worker_processes  1;
error_log logs/error.log;

events {
  worker_connections 1024;
}

http {
  upstream backend {
    server 0.0.0.1;

    balancer_by_lua_block {
      local balancer = require "ngx.balancer"
      local host = "127.0.0.1"
      local port = 8081

      local ok, err = balancer.set_current_peer(host, port)
      if not ok then
        ngx.log(ngx.ERR, "failed to set the current peer: ", err)
        return ngx.exit(500)
      end
    }

    keepalive 10;
  }

  server {
    listen 8080;
    location / {
      proxy_pass http://backend;
    }

    location = /dns {
      content_by_lua_block {
        local resolver = require "resty.dns.resolver"
        local r, err = resolver:new{
          nameservers = {"8.8.8.8", {"8.8.4.4", 53} },
          retrans = 5,  -- 5 retransmissions on receive timeout
          timeout = 2000,  -- 2 sec
        }

        if not r then
          ngx.say("failed to instantiate the resolver: ", err)
          return
        end

        local answers, err, tries = r:query("www.google.com", nil, {})
        if not answers then
          ngx.say("failed to query the DNS server: ", err)
          ngx.say("retry historie:\n  ", table.concat(tries, "\n  "))
          return
        end

        if answers.errcode then
          ngx.say("server returned error code: ", answers.errcode,
              ": ", answers.errstr)
        end

        for i, ans in ipairs(answers) do
          ngx.say(ans.name, " ", ans.address or ans.cname,
                " type:", ans.type, " class:", ans.class,
                " ttl:", ans.ttl)
        end
      }
    }
  }

  server {
    listen 8081;

    location / {
      echo "this is the fake backend peer...";
    }
  }
}
